public static class GeoLocation extends AsyncTask<JSONObject,JSONObject,JSONObject>
	{

		Context context;

		public GeoLocation(Context context)
		{
			this.context = context;
		}


		@Override
		protected void onPreExecute()
		{
			super.onPreExecute();
			VpnStatus.addLog("Starting Geo Location...");
		}


		@Override
		protected JSONObject doInBackground(JSONObject[] arg)
		{

			JSONObject obj = null;
			try
			{
				HttpURLConnection httpURLConnection = (HttpURLConnection) new URL("http://ip-api.com/json").openConnection();
				httpURLConnection .setRequestMethod("GET");

				InputStream is = httpURLConnection.getInputStream();
				BufferedReader input = new BufferedReader(new InputStreamReader(is));

				StringBuilder stringBuilder = new StringBuilder();
				while (true)
				{
					String readLine = input.readLine();
					if (readLine == null)
					{
						break;
					}
					stringBuilder.append(readLine);
				}
				obj = new JSONObject(stringBuilder.toString());
			}
			catch (UnsupportedEncodingException e)
			{
				cancel(true);
			}
			catch (ClientProtocolException e)
			{
				cancel(true);
			}
			catch (JSONException e)
			{
				cancel(true);
			}
			catch (IOException e)
			{
				cancel(true);
			}

			return obj;
		}

		@Override
		protected void onPostExecute(JSONObject result)
		{
			super.onPostExecute(result);

			StringBuffer buff = new StringBuffer();
			buff.append("<b>Geo Location Info:</b><br>");
			try
			{
				buff.append("Country: ").append(result.getString("country")).append("<br>");
				buff.append("Country code: ").append(result.getString("countryCode")).append("<br>");
				buff.append("Region: ").append(result.getString("regionName")).append("<br>");
				buff.append("Region code: ").append(result.getString("region")).append("<br>");
				buff.append("City: ").append(result.getString("city")).append("<br>");
				buff.append("Zip Code: ").append(result.getString("zip")).append("<br>");
				buff.append("Latitude: ").append(result.getString("lat")).append("<br>");
				buff.append("Longitude: ").append(result.getString("lon")).append("<br>");
				buff.append("Time Zone: ").append(result.getString("timezone")).append("<br>");
				buff.append("ISP: ").append(result.getString("isp")).append("<br>");
				buff.append("Organization: ").append(result.getString("org")).append("<br>");
				buff.append("AS number/name: ").append(result.getString("as")).append("<br>");
				buff.append("Internal IP: ").append(result.getString("query"));

				Profile def = new DBHelper(context).getProfiles().get(ApplicationBase.getSharedPreferences().getInt("id", 0));
				Profile profile = new Profile();
				profile.NAME = def.NAME;
				profile.IP = def.IP;
				profile.SSLPORT = def.SSLPORT;
				profile.PORT = def.PORT;
				profile.TYPE = def.TYPE;
				profile.USERNAME = def.USERNAME;
				profile.PASSWORD = def.PASSWORD;

				profile.PAYLOAD = def.PAYLOAD;
				profile.REMOTEHOST = def.REMOTEHOST;
				profile.REMOTEPORT = def.REMOTEPORT;


				profile.PROXYTYPE = def.PROXYTYPE;
				profile.SNI = def.SNI ;
				profile.FLAG = "flag_" + result.getString("countryCode").toLowerCase();
				profile.EMBED = def.EMBED;

				if (isConnecting)
					new DBHelper(context).updateProfile(Integer.parseInt(def.ID), profile);

			}
			catch (JSONException e)
			{
				buff.append("null");
			}

			VpnStatus.addLog(buff.toString());
		}

	}
